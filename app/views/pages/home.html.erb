<!--
  This is the form that asks the visitor to
  enter a keyword to search with on Tumblr.
-->
<script>
var TxtRotate = function(el, toRotate, period) {
  this.toRotate = toRotate;
  this.el = el;
  this.loopNum = 0;
  this.period = parseInt(period, 10) || 2000;
  this.txt = '';
  this.tick();
  this.isDeleting = false;
};

TxtRotate.prototype.tick = function() {
  var i = this.loopNum % this.toRotate.length;
  var fullTxt = this.toRotate[i];

  if (this.isDeleting) {
    this.txt = fullTxt.substring(0, this.txt.length - 1);
  } else {
    this.txt = fullTxt.substring(0, this.txt.length + 1);
  }

  this.el.innerHTML = '<span class="wrap">'+this.txt+'</span>';

  var that = this;
  var delta = 300 - Math.random() * 100;

  if (this.isDeleting) { delta /= 2; }

  if (!this.isDeleting && this.txt === fullTxt) {
    delta = this.period;
    this.isDeleting = true;
  } else if (this.isDeleting && this.txt === '') {
    this.isDeleting = false;
    this.loopNum++;
    delta = 500;
  }

  setTimeout(function() {
    that.tick();
  }, delta);
};

window.onload = function() {
  var elements = document.getElementsByClassName('txt-rotate');
  for (var i=0; i<elements.length; i++) {
    var toRotate = elements[i].getAttribute('data-rotate');
    var period = elements[i].getAttribute('data-period');
    if (toRotate) {
      new TxtRotate(elements[i], JSON.parse(toRotate), period);
    }
  }
  // INJECT CSS
  var css = document.createElement("style");
  css.type = "text/css";
  css.innerHTML = ".txt-rotate > .wrap { border-right: 0.08em solid #666 }";
  document.body.appendChild(css);
};

</script>
<div class="container" id="search_box"><br><br>
<div class="row">
  <div class="twelve columns">
  <div class="ten columns offset-by-one columns"><center>
    <h1>Create a poster about
      <span
        class="txt-rotate"
        data-period="2000"
        data-rotate='[ "#harrypotter.", "#DanandPhil.", "#memes.", "#disney.", "#starwars" ]'></span>
    </h1><br>
    <h3>What's your&nbsp;&nbsp;<form action="/" style="margin: 0; padding: 0; width: 200px; height: 70px; display: inline;"><input style="display: inline; width: 200px; height: 70px;" placeholder=" #Fandom" type="text" name="tumblrSearch">&nbsp;&nbsp;?<br><button style="display: inline; width: 400px; height: 60px;" type="submit">grab your poster</button></form>
  </center></div>
</div>
</div>

</div>

<!-- This is where the Ruby comes in -->

<!-- Would like to figure out exactly how this line works -->
<% search_tag = params[:tumblrSearch] %>

<!-- This indicates that if the search_tag is not empty, it starts to run the script -->
<% if search_tag != nil %>
<% if search_tag.include? "#"
    search_tag.tr_s!('#', '')
  end%>

<!-- This is the script that grabs the pictures from Tumblr. MAYBE PUT THIS IN ANOTHER PLACE IN RAILS? -->
<%
  # Authenticate via API Key
  client = Tumblr::Client.new :consumer_key => ENV['TUMBLR_CONSUMER_KEY']

  # Create a new variable with a new array inside
  pictures = Array.new

  # Now we start a loop that continues until a certain amount (equal or bigger than...) of pictures is taken out of the tumblr posts.
  until pictures.length >= 30

    # Make the request and assigns this to the variable posts
    posts = client.tagged search_tag, :before => @timestamp ,:limit => 30

    # This makes sure that the program knows what the last timestamp is. Otherwise you would get the same 20 pictures
    @timestamp = posts.last["timestamp"]

    # takes each item out of the variable posts. each item is assigned the variable post
    posts.each do |post|
      # if the post contains the element "photos"
      if post["photos"]
        # takes each post that has the element "photo" and assign it to the variable picture
        post["photos"].each do |picture|
          # searches the picture item for "original_size" and searches the "original_size" for "url". then it takes this url and puts it into the item variable.
          item = picture["original_size"]["url"]
          # condition of the image being a jpg or png
          if item.include? ("jpg" || "png")
            # pushes the content of item (the url) to the array called pictures.
            pictures.push(item)
          # ends the if block
          end
        # ends the block of each
        end
      # ends the block of if
      end
    # Ends the each of posts
    end

  # Ends the loop of until
  end

  # starts a loop until the length of the pictures array is 100
  until pictures.length == 30
    # pops off items in the pictures array
    pictures.pop
  # ends the until loop
  end
  %>

  <div class="container">
    <div class="row">
      <div class="twelve columns" id="yay_message">
        <h3>Yay! Here are your pictures!</h3>
      </div>
    </div>
  </div>
  <div class="container">
    <div class="row">
      <div class="twelve columns" id="pictures_box">
        <center>
        <% pictures.each do |image| %>
          <%= image_tag(image, class: "pictures")%>
        <% end %>
      </center>
      </div>
    </div>
  </div>
<%
end
%>
